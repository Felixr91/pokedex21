{"version":3,"sources":["components/Sprite.js","components/PokemonName.js","App.js","reportWebVitals.js","index.js"],"names":["Sprite","props","useState","className","style","height","alt","src","data","PokemonName","name","replace","toUpperCase","App","setCurrentPoke","currentPokeID","setCurrentPokeID","lowerCaseName","setCurrentLowerCasePoke","type","setPokemonType","setPokeHeight","weight","setPokeweight","allNames","setAutoComplete","inputValue","setInputValue","flavorText","setFlavorText","useEffect","a","fetch","res","json","pokearray","results","console","log","fetchPokeNames","updatePokemon","urlVal","fetchPoke","e","pokeID","id","lower","toLowerCase","types","alert","fetchFlavorText","flavData","entry","flavor_text_entries","flavor_text","CssBaseline","onSubmit","preventDefault","Autocomplete","freesolo","onInputChange","event","newInputValue","options","getOptionLabel","option","getOptionSelected","width","renderInput","params","TextField","label","variant","value","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Button","onClick","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6d5150d.chunk.js","sourcesContent":["import { useState } from 'react'\n\nconst Sprite = (props) => {\n\n    const [imgSource, setImageSource] = useState('')    \n\n    return (\n        <div>\n            <img className='sprite' style={{height: \"100px\"}} alt='poke sprite' src={('https://img.pokemondb.net/sprites/black-white/anim/normal/' + props.data + '.gif')}></img>\n            \n        </div>\n    )\n}\n\nexport default Sprite","import React from 'react'\n\nconst PokemonName = (name) => {\n\n    const formatName = () =>{\n        var upperCaseFormatted = name.data.replace(\"-\", \". \").toUpperCase()\n        return(upperCaseFormatted)\n    }\n\n    return(\n        <div>\n            <h1 className=\"poke-name\">{formatName()}</h1>\n        </div>\n    )\n}\n\nexport default PokemonName","import './App.css';\nimport { useState, useEffect } from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Sprite from './components/Sprite'\nimport PokemonName from './components/PokemonName';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\n\n\nconst App = () =>{\n  const [name, setCurrentPoke] = useState('Pikachu')\n  const [currentPokeID, setCurrentPokeID] = useState(25)\n  const [lowerCaseName, setCurrentLowerCasePoke] = useState('pikachu')\n  const [type, setPokemonType] = useState('electric')\n  const [height, setPokeHeight] = useState('40')\n  const [weight, setPokeweight] = useState('6.0')\n  const [allNames, setAutoComplete] = useState([])\n  const [inputValue, setInputValue] = useState('');\n  const [flavorText, setFlavorText] = useState('When several of these PokÃ©mon gather, their\felectricity could build and cause lightning storms.')\n \n\n  useEffect(() => {\n    // fetches names from api for autoComplete component\n    const fetchPokeNames = async() =>{\n      try{\n        const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n        const data = await res.json()\n        const pokearray = data.results\n\n        setAutoComplete(pokearray)\n      } catch(e){\n        console.log('unable to get poke names for autocomplete', e)\n      }\n    }\n\n    fetchPokeNames()\n  }, [])\n\n\n  const updatePokemon = (name) => {\n\n    var urlVal = name\n\n    const fetchPoke = async(e) => {\n      try{\n       \n        const res = await fetch('https://pokeapi.co/api/v2/pokemon/' + urlVal)\n        const data = await res.json()\n        const name = data.name\n        const pokeID = data.id\n        const lower = data.name.toLowerCase()\n        const type = data.types[0].type.name\n        const height = data.height*10\n        const weight = data.weight/10\n        \n        if(data.id > 151){\n          alert('Sorry, only first generation Pokemon!')\n        } else{\n          setCurrentPoke(name)\n          setCurrentPokeID(pokeID)\n          setCurrentLowerCasePoke(lower)\n          setPokemonType(type)\n          setPokeHeight(height)\n          setPokeweight(weight)\n          fetchFlavorText(pokeID)\n        }\n\n      } catch (e){\n        alert('Please provide a name from the suggestions')\n      }\n    }\n\n\n    const fetchFlavorText = async(id)=>{\n      const res = await fetch('https://pokeapi.co/api/v2/pokemon-species/'+ id)\n      const flavData = await res.json()\n      const entry = flavData.flavor_text_entries[1].flavor_text\n      \n      setFlavorText(entry)\n    }\n    \n    fetchPoke(urlVal)\n    \n  }\n\n  const onSubmit = (e) =>{\n    \n    e.preventDefault()\n    \n    if(!inputValue){\n        alert(\"Please provide a name from the suggestions\")\n    }\n    var tolower = inputValue\n\n    updatePokemon(tolower)\n\n\n  }\n\n  const previousPoke = (e) =>{\n    e.preventDefault()\n    var num = currentPokeID - 1\n    updatePokemon(num)\n    console.log(num)\n  }\n\n  const nextPoke = (e) =>{\n    e.preventDefault()\n    var num = currentPokeID + 1\n    updatePokemon(num)\n    console.log(num)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n\n      <header className=\"App-header\">\n\n        <form className=\"change-Pokemon\" onSubmit={onSubmit}>\n\n          <Autocomplete\n            freesolo=\"true\"\n\n            inputValue={inputValue}\n            onInputChange={(event, newInputValue) => {\n              setInputValue(newInputValue);\n            }}\n\n            id=\"combo-box-demo\"\n            options={allNames}\n            getOptionLabel={(option) => option.name}\n            getOptionSelected={(option) => option.name }\n            style={{ width: 300 }}\n            renderInput={(params) => <TextField {...params} label=\"Search by Name\" variant=\"outlined\" />}\n          />\n\n          <input type=\"submit\" value=\"GO\" className=\"btn\"></input>\n        </form>\n\n        <PokemonName data = {name}/>\n\n        <Sprite data = {lowerCaseName}/>      \n\n          <div className=\"table-container\">\n            <TableContainer >\n              <Table  aria-label=\"simple table\">\n                <TableHead>\n                <TableRow>\n                    <TableCell align=\"center\">Number</TableCell>\n                    <TableCell align=\"center\">#{currentPokeID}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"center\">Type</TableCell>\n                    <TableCell align=\"center\">{type}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"center\">Height</TableCell>\n                    <TableCell align=\"center\">{height} centimeters</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"center\">Weight</TableCell>\n                    <TableCell align=\"center\">{weight} kg</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                \n                </TableBody>\n              </Table>\n            </TableContainer>\n            <div className=\"flavor-container\">\n              <p>{flavorText}</p>\n            </div>\n          </div>\n\n          <div className=\"prev-next-row\">\n            <Button variant=\"contained\" className=\"prev-next\" onClick={previousPoke}>\n              Previous\n            </Button>\n            <Button variant=\"contained\" className=\"prev-next\" onClick={nextPoke}>\n              Next\n            </Button>\n          </div>        \n\n      </header>\n        \n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}